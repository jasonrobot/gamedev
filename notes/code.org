* Map Problems
Since I'm not using gamera, and hump.camera doesnt have a nice way to get the viewport, I'm going to have to do some kind of manual culling.
The plan originally was to have several fairly large chunks of map that could be loaded on the fly and only drawn when needed. It would be something like:
 -----------
| 1 | 2 | 3 |
|---+---+---|
| 4 | P | 6 |
|---+---+---|
| 7 | 8 | 9 |
 -----------

That shows the player in chunk 5 (which would obviously be displayed), with the 8 surrounding chunks that are loaded but not displayed. This arrangement assures that there wont be any unrendered crap, and we can afford that much performance NP.

Code first, optimize later, shithead.

* Game Director and the Main loop
Stuff the GameDirector does:
- Set the window.
- Load the map.
- Load the relevant actors
 - Its going to have to work with the camera to figure out who needs to be where.

* Todos:

We've got a gamestate for the main play and a physics world in it. Need to decide:
How to add actors to the physics world in a way they can be removed easily.
How to draw actors in relation to the map.
- Fire a draw event that all actors should listen to. 
How to get key inputs passed on to the actors (the active actor)
- this could be done by having a method inside the actor that asks it to register all callbacks it wants to recieve. Then we have one unified input handler that turns any keypress into a corresponding event being fired.

* How Actors work
Actors will all just be actors.
Instead of subclassing them to give them special characteristics, we should pass them all their special properties at instantiation time. I suppose another benefit of this is having the ability to change those properties at runtime?

So for things like key->action mapping, that would be a table passed in to the constructor. Same goes for size, location, sprite, &c. It will make for a monster of a constructor, but we could also set all those options after the fact with functions. (ok, so width and height can only be changed by changing the scale in HC)
